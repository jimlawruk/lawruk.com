@page
@model PageViewModel
@{
    Model.PageTitle = "Collecting and Mapping Street Lights";
    Model.PageType = "Blog";
    Model.Author = "Jim Lawruk";
    Model.DateTime = new DateTime(2021, 4, 23);
}
<style>
    #viewDiv {
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
    }
</style>

<link href="https://js.arcgis.com/4.16/esri/css/main.css" rel="stylesheet" type="text/css">
<script src="https://js.arcgis.com/4.16"></script>

<script>
    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/widgets/BasemapToggle",
        "esri/widgets/LayerList",
        "esri/layers/FeatureLayer",
        "esri/widgets/Locate",
        "esri/Graphic",
        "esri/layers/GraphicsLayer",
        "esri/geometry/Point",
        "esri/geometry/Polyline",
        "esri/request",
        "esri/symbols/SimpleLineSymbol",
        "esri/geometry/SpatialReference",

    ], function (
        Map, MapView,
        BasemapToggle,
        LayerList,
        FeatureLayer,
        Locate,
        Graphic, GraphicsLayer, Point, Polyline, request, SimpleLineSymbol, SpatialReference,
    ) {

        var map = new Map({
            basemap: "streets-night-vector"
        });

        var view = new MapView({
            container: "viewDiv",
            map: map,
            zoom: 14,
            center: [-76.925, 40.245]
        });

        var toggle = new BasemapToggle({
            titleVisible: true,
            view: view
        });
        view.ui.add(toggle, "bottom-right");

        var layerList = new LayerList({
            view: view
        });
        view.ui.add(layerList, "top-right");

        var locateBtn = new Locate({
            view: view
        });
        view.ui.add(locateBtn, "top-left");

        addGeoJSONLayer("/blog/collecting-mapping-street-lights/lines.json", "Route", [200, 0, 0, 1], false);
        addGeoJSONLayer("/blog/collecting-mapping-street-lights/points.json", "Street Lights", [200, 200, 0, 1], false);

        function addGeoJSONLayer(fileName, title, colorArray, visible) {
            request(fileName, { responseType: 'json' }).then(function (response) {
                var geoJson = response.data;
                var type = geoJson.features.length && geoJson.features[0].geometry.type;
                var graphics;
                if (type === 'LineString') {
                    graphics = getLineEsriGraphicsFromGeoJson(geoJson, 4326, colorArray);
                }
                else {
                    var graphics = getPointEsriGraphicsFromGeoJson(geoJson, 4326, colorArray);
                }
                var graphicsLayer = new GraphicsLayer();
                graphicsLayer.visible = visible;
                graphicsLayer.title = title;
                graphics.forEach(function (graphic) {
                    graphicsLayer.add(graphic);
                });
                map.add(graphicsLayer);
            });
        }

        function getPointEsriGraphicsFromGeoJson(geoJson, wkid, colorArray) {
            return geoJson.features.map(function (feature, i) {
                var coordinates = feature.geometry.coordinates;

                var point = new Point({
                    'type': 'point',
                    'longitude': coordinates[0],
                    'latitude': coordinates[1],
                    'spatialReference': new SpatialReference({ 'wkid': wkid })
                });

                var markerSymbol = {
                    type: "simple-marker",
                    color: colorArray,
                    size: 8,
                    outline: {
                        color: [255, 255, 255],
                        width: 2
                    }
                };
                var graphicDefinition = getGraphicDefinition(feature, point, markerSymbol);
                var pointGraphic = new Graphic(graphicDefinition);
                return pointGraphic;
            });
        }

        function getLineEsriGraphicsFromGeoJson(geoJson, wkid, colorArray) {
            return geoJson.features.map(function (feature, i) {
                var paths = feature.geometry.coordinates || feature.geometry.paths;
                var polyline = new Polyline({
                    'type': 'polyline',
                    'paths': paths,
                    'spatialReference': new SpatialReference({ 'wkid': wkid })
                });
                var lineSymbol = new SimpleLineSymbol({ type: "simple-line", color: colorArray, width: 2, style: "solid" });
                var graphicDefinition = getGraphicDefinition(feature, polyline, lineSymbol);
                var polylineGraphic = new Graphic(graphicDefinition);
                return polylineGraphic;
            });
        }

        function getGraphicDefinition(feature, geometry, symbol) {
            var graphicDefinition = {
                geometry: geometry,
                symbol: symbol,
                attributes: feature.properties || feature.attributes,
                popupTemplate: {
                    title: "Segment",
                    content: [{
                        type: "fields",
                        fieldInfos: []
                    }]
                }
            }
            for (var property in feature.properties) {
                var fieldInfo = { "fieldName": property }
                graphicDefinition.popupTemplate.content[0].fieldInfos.push(fieldInfo);
            }
            return graphicDefinition;
        }

    });
</script>

<div id="viewDiv"></div>
<p>
    Goal: Cover the full life cycle, from feature collection, processing the data, and displaying.
    In this industry, at least me, I am simply supplied with the data.
    So this technique allows you to collect the data, and then to manipulate it, publish it, display it. customized it.

    You might ask. Why not use a phone app for this?
    I looked into phone apps,
    there a serveral good ones out there.
    You can see photos of these folks in the field, they have nice sunny day.

    But if it is winter, you are wearing gloves. or if it is rainy.
    a phone doesn't work as well.
    If you are biking or running, you might drop the phone.
    So a watch or a rugged device just makes practical sense in certain situations


    Next Decide which type of feature points you want to collect.
    I wanted to do collect the streetlight locations in my neighborhood.
    But this process can be used for any type of point feature collection:
</p>